# 1. Créer une User Assigned Managed Identity dans votre groupe de ressource
# 2. Créer une Federated credentials dans les settings de la Managed Identity
#   - Federated credential scenario => Github
#   - Organization => votre organization Github
#   - Repository => nom du repo Git qui exécute le github actions
#   - Entity => Branch
#   - Branch => le nom de votre branche
# 2. Affecter un rôle Contributor à cette Managed Identity sur votre abonnement Azure (Access Control)
# 3. Créer des secrets dans Github
#   - AZURE_CLIENT_ID => l'ID se récupère dans l'overview de la Managed Identity
#   - AZURE_TENANT_ID => se récupère avec la commande az account list => tenantId
#   - AZURE_SUBSCRIPTION_ID => l'ID se récupère dans l'overview de l'Abonnement
# 4. Tester la Github Actions


name: Deploy MSSQL to AKS

on:
  push:
    branches: ["develop"]
  workflow_dispatch:

env:
  RESOURCE_GROUP: "rg-maalsi-23"
  CLUSTER_NAME: "aks-maalsi-23"
  NAMESPACE_NAME: "mfolabs"

jobs:
  deploy:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
      # Checks out the repository this file is in
      - uses: actions/checkout@v3

      # Logs in with your Azure credentials
      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Use kubelogin to configure your kubeconfig for Azure auth
      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.25'

      # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
      - name: Get K8s context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          admin: 'false'
          use-kubelogin: 'true'

      # Create Kubernetes namespace
      - name: Create namespace
        run: |
          kubectl create namespace ${{ env.NAMESPACE_NAME }} --dry-run=client -o yaml | kubectl apply -f -
      
      # Deploys secrets based on given manifest file
      - name: Deploy secrets to AKS
        run: |
          cd kubernetes/keyvault
          kubectl apply -k ./overlays/demo -n ${{ env.NAMESPACE_NAME }}

      # Deploys application based on given manifest file
      - name: Deploy to AKS
        run: |
          cd kubernetes/mssql
          kubectl apply -k ./overlays/demo -n ${{ env.NAMESPACE_NAME }}
